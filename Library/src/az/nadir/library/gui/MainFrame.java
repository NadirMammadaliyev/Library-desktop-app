/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package az.nadir.library.gui;

import az.nadir.library.dao.BookDao;
import az.nadir.library.dao.UserDao;
import az.nadir.library.model.Author;
import az.nadir.library.model.Book;
import az.nadir.library.model.BookInfo;
import az.nadir.library.model.Employee;
import az.nadir.library.model.GiveBook;
import az.nadir.library.model.Language;
import az.nadir.library.model.LoginUser;
import az.nadir.library.model.Topic;
import az.nadir.library.model.User;
import az.nadir.library.service.AuthorService;
import az.nadir.library.service.BookInfoService;
import az.nadir.library.service.BookService;
import az.nadir.library.service.EmployeeService;
import az.nadir.library.service.GiveBookService;
import az.nadir.library.service.LanguageService;
import az.nadir.library.service.LoginUserService;
import az.nadir.library.service.PositionService;
import az.nadir.library.service.ReadingRoomService;
import az.nadir.library.service.ShelfService;
import az.nadir.library.service.TopicService;
import az.nadir.library.service.UserService;
import java.awt.Color;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Asus
 */
public class MainFrame extends javax.swing.JFrame {

    private UserService userService;
    private LanguageService languageService;
    private AuthorService authorService;
    private EmployeeService employeeService;
    private TopicService topicService;
    private String globBtnName = " ";
    private Long selectedId;
    private PositionService positionService;
    private BookService bookService;
    private ShelfService shelfService;
    private BookInfoService bookInfoService;
    private ReadingRoomService readingRoomService;
    private GiveBookService giveBookService;
    private LoginUser loginUser;

    public MainFrame() {
        initComponents();
    }

    public MainFrame(UserService userService, LanguageService languageService, AuthorService authorService, EmployeeService employeeService, TopicService topicService, PositionService positionService, BookService bookService, ShelfService shelfService, BookInfoService bookInfoService, ReadingRoomService readingRoomService, GiveBookService giveBookService, LoginUser loginUser) {
        this.userService = userService;
        this.languageService = languageService;
        this.authorService = authorService;
        this.employeeService = employeeService;
        this.topicService = topicService;
        this.positionService = positionService;
        this.bookService = bookService;
        this.shelfService = shelfService;
        this.bookInfoService = bookInfoService;
        this.readingRoomService = readingRoomService;
        this.giveBookService = giveBookService;
        this.loginUser = loginUser;

        initComponents();
        welcomeLbl.setText(loginUser.getName() + " " + loginUser.getSurname());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        welcomeLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        userDataBtn = new javax.swing.JButton();
        bookDataBtn = new javax.swing.JButton();
        returnBtn = new javax.swing.JButton();
        topicDataBtn = new javax.swing.JButton();
        languageDataBtn = new javax.swing.JButton();
        employeeDataBtn = new javax.swing.JButton();
        infoLbl = new javax.swing.JLabel();
        giveBtn = new javax.swing.JButton();
        statisticsBtn = new javax.swing.JButton();
        batBtn = new javax.swing.JButton();
        probUserBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        newBtn = new javax.swing.JButton();
        keywordTxt = new javax.swing.JTextField();
        searchLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(99, 100, 86));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Leelawadee UI Semilight", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/books_100px.png"))); // NOI18N
        jLabel2.setText("Nadir's Library");
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/exit_32.png"))); // NOI18N
        jLabel1.setText("Log out");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
        });

        welcomeLbl.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        welcomeLbl.setForeground(new java.awt.Color(255, 255, 255));
        welcomeLbl.setText("Ad soyad");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/icons8_usernww_32.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 916, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(welcomeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(welcomeLbl)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1650, 120));

        jPanel2.setBackground(new java.awt.Color(206, 184, 164));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel2MouseExited(evt);
            }
        });

        userDataBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        userDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/user_32.png"))); // NOI18N
        userDataBtn.setText(" Users");
        userDataBtn.setFocusPainted(false);
        userDataBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        userDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userDataBtnActionPerformed(evt);
            }
        });

        bookDataBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/book32_32.png"))); // NOI18N
        bookDataBtn.setText(" Books");
        bookDataBtn.setFocusPainted(false);
        bookDataBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        bookDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookDataBtnActionPerformed(evt);
            }
        });

        returnBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        returnBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/ColorReturn_32.png"))); // NOI18N
        returnBtn.setText(" Return");
        returnBtn.setFocusPainted(false);
        returnBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        returnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBtnActionPerformed(evt);
            }
        });

        topicDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/glossary_16.png"))); // NOI18N
        topicDataBtn.setText("Topic");
        topicDataBtn.setFocusPainted(false);
        topicDataBtn.setPreferredSize(new java.awt.Dimension(113, 30));
        topicDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                topicDataBtnActionPerformed(evt);
            }
        });

        languageDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/language_16.png"))); // NOI18N
        languageDataBtn.setText("Language");
        languageDataBtn.setFocusPainted(false);
        languageDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageDataBtnActionPerformed(evt);
            }
        });

        employeeDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/profile_16.png"))); // NOI18N
        employeeDataBtn.setText("Employee");
        employeeDataBtn.setFocusPainted(false);
        employeeDataBtn.setPreferredSize(new java.awt.Dimension(113, 30));
        employeeDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeDataBtnActionPerformed(evt);
            }
        });

        infoLbl.setBackground(new java.awt.Color(206, 184, 164));
        infoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/32info_32.png"))); // NOI18N
        infoLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        infoLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                infoLblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                infoLblMouseEntered(evt);
            }
        });

        giveBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        giveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/icons8_return_book_32.png"))); // NOI18N
        giveBtn.setText(" Give");
        giveBtn.setFocusPainted(false);
        giveBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        giveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                giveBtnActionPerformed(evt);
            }
        });

        statisticsBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        statisticsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/statistics_32.png"))); // NOI18N
        statisticsBtn.setText(" Statistics");
        statisticsBtn.setFocusPainted(false);
        statisticsBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        statisticsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statisticsBtnActionPerformed(evt);
            }
        });

        batBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        batBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/32info_32.png"))); // NOI18N
        batBtn.setText(" Book Info");
        batBtn.setFocusPainted(false);
        batBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        batBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batBtnActionPerformed(evt);
            }
        });

        probUserBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        probUserBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/problem_32.png"))); // NOI18N
        probUserBtn.setText(" Problem");
        probUserBtn.setActionCommand("Poblem");
        probUserBtn.setFocusPainted(false);
        probUserBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        probUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                probUserBtnActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/author_32.png"))); // NOI18N
        jButton1.setText(" Author");
        jButton1.setFocusPainted(false);
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(returnBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                                .addComponent(languageDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(topicDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(employeeDataBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(statisticsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(bookDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(infoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(probUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(giveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(batBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 2, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(userDataBtn)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookDataBtn)
                    .addComponent(infoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(batBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(giveBtn)
                .addGap(18, 18, 18)
                .addComponent(returnBtn)
                .addGap(18, 18, 18)
                .addComponent(statisticsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(probUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(languageDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(topicDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(employeeDataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 240, 730));

        jTable1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setRowHeight(18);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 120, 1180, 730));

        jPanel4.setBackground(new java.awt.Color(206, 184, 164));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setPreferredSize(new java.awt.Dimension(210, 540));

        editBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/edit22_32.png"))); // NOI18N
        editBtn.setText("   Edit");
        editBtn.setFocusPainted(false);
        editBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/Color_cross_mark_32.png"))); // NOI18N
        deleteBtn.setText("   Delete");
        deleteBtn.setFocusPainted(false);
        deleteBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        newBtn.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        newBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/Color_new_copy_32.png"))); // NOI18N
        newBtn.setText("   New");
        newBtn.setFocusPainted(false);
        newBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        newBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBtnActionPerformed(evt);
            }
        });

        keywordTxt.setBackground(new java.awt.Color(231, 221, 212));
        keywordTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keywordTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordTxtActionPerformed(evt);
            }
        });
        keywordTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keywordTxtKeyReleased(evt);
            }
        });

        searchLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/az/nadir/library/images/search32_32.png"))); // NOI18N
        searchLbl.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        searchLbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchLblMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchLbl))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(keywordTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addComponent(newBtn)
                .addGap(18, 18, 18)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(488, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1420, 120, 230, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel2MouseExited

    private void userDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userDataBtnActionPerformed

        try {
            showUserData(userService.getUserList());
            globBtnName = "user";
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_userDataBtnActionPerformed

    private void bookDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookDataBtnActionPerformed
        globBtnName = "book";
        try {

            showBookData(bookService.getBookList());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bookDataBtnActionPerformed

    private void returnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBtnActionPerformed
        ReturnFrame returnFrame = new ReturnFrame(bookService);
        returnFrame.setVisible(true);
        returnFrame.setLocationRelativeTo(null);
        returnFrame.setTitle("Return Book");
    }//GEN-LAST:event_returnBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed

        int rowIndex = jTable1.getSelectedRow();
        if (rowIndex != -1) {
            Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);

            switch (globBtnName) {
                case "user":
                    EditUserFrame editUserFrame = new EditUserFrame(userService, selectedId);
                    editUserFrame.setTitle("Edit user");
                    editUserFrame.setVisible(true);
                    editUserFrame.setLocationRelativeTo(null);

                    break;
                case "language":
                    EditLanguageFrame editLanguageFrame = new EditLanguageFrame(languageService, selectedId);
                    editLanguageFrame.setTitle("Edit language");
                    editLanguageFrame.setVisible(true);
                    editLanguageFrame.setLocationRelativeTo(null);
                    break;
                case "topic":
                    EditTopicFrame editTopicFrame = new EditTopicFrame(topicService, selectedId);
                    editTopicFrame.setTitle("Edit Topic");
                    editTopicFrame.setVisible(true);
                    editTopicFrame.setLocationRelativeTo(null);
                    break;
                case "employee":

                    EditEmployeeFrame editEmployeeFrame = new EditEmployeeFrame(employeeService, positionService, selectedId);
                    editEmployeeFrame.setTitle("Edit employee");
                    editEmployeeFrame.setVisible(true);
                    editEmployeeFrame.setLocationRelativeTo(null);
                    break;
                case "give":
                    EditGiveBookFrame editGiveBookFrame = new EditGiveBookFrame(giveBookService, bookService, userService, employeeService, selectedId, readingRoomService);
                    editGiveBookFrame.setTitle("Edit ");
                    editGiveBookFrame.setVisible(true);
                    editGiveBookFrame.setLocationRelativeTo(null);
                    break;
                case "book":
                    EditBookFrame editBookFrame = new EditBookFrame(bookService, languageService, shelfService, selectedId);
                    editBookFrame.setTitle("Edit book");
                    editBookFrame.setLocationRelativeTo(null);
                    editBookFrame.setVisible(true);
                    break;
                case "author":
                    EditAuthorFrame editAuthorFrame = new EditAuthorFrame(authorService, selectedId);
                    editAuthorFrame.setTitle("Edit author");
                    editAuthorFrame.setLocationRelativeTo(null);
                    editAuthorFrame.setVisible(true);
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please, select menu!");
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void newBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBtnActionPerformed
        switch (globBtnName) {
            case "user":
                NewUserFrame newUserFrame = new NewUserFrame(userService);
                newUserFrame.setTitle("New User");
                newUserFrame.setVisible(true);
                newUserFrame.setLocationRelativeTo(null);
                break;
            case "language":
                NewLanguageFrame newLanguageFrame = new NewLanguageFrame(languageService);
                newLanguageFrame.setTitle("New Language");
                newLanguageFrame.setVisible(true);
                newLanguageFrame.setLocationRelativeTo(null);
                break;
            case "topic":
                NewTopicFrame newTopicFrame = new NewTopicFrame(topicService);
                newTopicFrame.setTitle("New Topic");
                newTopicFrame.setVisible(true);
                newTopicFrame.setLocationRelativeTo(null);
                break;
            case "employee":
                NewEmployeeFrame newEmployeeFrame = new NewEmployeeFrame(employeeService, positionService);
                newEmployeeFrame.setVisible(true);
                newEmployeeFrame.setTitle("New Employee");
                newEmployeeFrame.setLocationRelativeTo(null);
                break;
            case "book":
                NewBookFrame newBookFrame = new NewBookFrame(bookService, languageService, shelfService, topicService, authorService, bookInfoService);
                newBookFrame.setTitle("New Book");
                newBookFrame.setLocationRelativeTo(null);
                newBookFrame.setVisible(true);
                break;
            case "give":
                NewGiveBookFrame newGiveBookFrame = new NewGiveBookFrame(giveBookService, bookService, userService, employeeService, readingRoomService);
                newGiveBookFrame.setTitle("Give book");
                newGiveBookFrame.setLocationRelativeTo(null);
                newGiveBookFrame.setVisible(true);
                break;

            case "problemicUsers":
                NewProblemicUsers newProblemicUsers = new NewProblemicUsers(userService);
                newProblemicUsers.setTitle("New Problic User");
                newProblemicUsers.setLocationRelativeTo(null);
                newProblemicUsers.setVisible(true);
                break;
            case "author":
                NewAuthorFrame newAuthorFrame = new NewAuthorFrame(authorService);
                newAuthorFrame.setTitle("New Author");
                newAuthorFrame.setLocationRelativeTo(null);
                newAuthorFrame.setVisible(true);
                break;
            default:
                JOptionPane.showMessageDialog(null, "Please, select menu!");
        }
    }//GEN-LAST:event_newBtnActionPerformed

    private void languageDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageDataBtnActionPerformed
        try {
            showLanguageData(languageService.getLanguageList());
            globBtnName = "language";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_languageDataBtnActionPerformed

    private void employeeDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeDataBtnActionPerformed
        try {
            showEmployeeData(employeeService.getEmployeeList());
            globBtnName = "employee";
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_employeeDataBtnActionPerformed

    private void topicDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_topicDataBtnActionPerformed
        try {
            globBtnName = "topic";
            showTopicData(topicService.getTopicList());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_topicDataBtnActionPerformed

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        jLabel1.setBackground(Color.red);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int rowIndex = jTable1.getSelectedRow();
        try {
            if (rowIndex != -1) {
                Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);

                switch (globBtnName) {
                    case "user":
                        int isConfirmMessage = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete user", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessage == JOptionPane.YES_OPTION) {
                            userService.deleteUser(selectedId);
                            JOptionPane.showMessageDialog(null, "User has been succsessfully deleted!");
                            showUserData(userService.getUserList());

                        }

                        break;
                    case "language":
                        int isConfirmMessageLan = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete language", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageLan == JOptionPane.YES_OPTION) {
                            languageService.deleteLanguage(selectedId);
                            JOptionPane.showMessageDialog(null, "Language has been succsessfully deleted!");
                            showLanguageData(languageService.getLanguageList());
                        }
                        break;
                    case "topic":
                        int isConfirmMessageTop = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete topic", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageTop == JOptionPane.YES_OPTION) {
                            topicService.deleteTopic(selectedId);
                            JOptionPane.showMessageDialog(null, "Topic has been succsessfully deleted!");
                            showTopicData(topicService.getTopicList());
                        }
                        break;
                    case "employee":
                        int isConfirmMessageEmp = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete employee", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageEmp == JOptionPane.YES_OPTION) {
                            employeeService.deleteEmployee(selectedId);
                            JOptionPane.showMessageDialog(null, "Employee has been succsessfully deleted!");
                            showEmployeeData(employeeService.getEmployeeList());
                        }
                        break;
                    case "book":
                        int isConfirmMessageBook = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete book", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageBook == JOptionPane.YES_OPTION) {
                            bookService.deleteBook(selectedId);
                            JOptionPane.showMessageDialog(null, "Book has been succsessfully deleted!");
                            showBookData(bookService.getBookList());
                        }
                        break;
                    case "bookInfo":
                        int isConfirmMessageBookInfo = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete book information", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageBookInfo == JOptionPane.YES_OPTION) {
                            bookInfoService.deleteBookInfo(selectedId);
                            JOptionPane.showMessageDialog(null, "Book Infomation has been succsessfully deleted!");
                            showBookInfoData(bookInfoService.getBookInfoList());
                        }
                        break;
                    case "give":
                        int isConfirmMessageBookGive = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete give book", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageBookGive == JOptionPane.YES_OPTION) {
                            giveBookService.deleteGiveBook(selectedId);
                            JOptionPane.showMessageDialog(null, "Infomation has been succsessfully deleted!");
                            showGiveBookData(giveBookService.getGiveBookList());
                        }
                        break;
                    case "problemicUsers":
                        int isConfirmMessageProblemicUsers = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete problemic user", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageProblemicUsers == JOptionPane.YES_OPTION) {
                            userService.updateUserDeleteProblemicUser(selectedId);
                            JOptionPane.showMessageDialog(null, "User has been removed from the \"Problemic users\" table!");
                            showProblemicUsers(userService.getProblemicUsers());
                        }
                        break;
                    case "author":
                        int isConfirmMessageAuthor = JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete author", JOptionPane.YES_NO_OPTION);
                        if (isConfirmMessageAuthor == JOptionPane.YES_OPTION) {
                            authorService.deleteAuthor(selectedId);
                            JOptionPane.showMessageDialog(null, "Author has been removed from the author table!");
                            showAuthorData(authorService.getAuthorList());
                        }
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "Please, select row!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please, select menu!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Problem!Selecteden row has not been succsessfully deleted!");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed

    }//GEN-LAST:event_jTable1MousePressed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.getClickCount() == 2) {
            editBtnActionPerformed(null);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void infoLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLblMouseClicked
        globBtnName = "bookInfo";
        int rowIndex = jTable1.getSelectedRow();

        if (rowIndex != -1) {

            Long selectedId = (Long) jTable1.getValueAt(rowIndex, 0);
            try {
                DefaultTableModel model = new DefaultTableModel() {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }

                };
                jTable1.setModel(model);
                model.addColumn("№");
                model.addColumn("Book ");
                model.addColumn("Author ");
                model.addColumn("Topic");
                Book book = bookService.getBookById(selectedId);
                List<BookInfo> bookInfoList = bookInfoService.getBookInfoByBookId(book.getId());
                for (BookInfo bookInfo : bookInfoList) {
                    Object[] data = new Object[]{
                        bookInfo.getId(), bookInfo.getBook().getName(), bookInfo.getAuthor().getName() + " " + bookInfo.getAuthor().getSurname(), bookInfo.getTopic().getName()
                    };

                    model.addRow(data);
                    model.fireTableDataChanged();
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }

        } else {
            try {
                showBookInfoData(bookInfoService.getBookInfoList());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_infoLblMouseClicked

    private void infoLblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_infoLblMouseEntered
        infoLbl.setBackground(Color.red);
    }//GEN-LAST:event_infoLblMouseEntered

    private void keywordTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordTxtActionPerformed

    private void searchLblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchLblMouseClicked
        try {
            String keyword = keywordTxt.getText();
            switch (globBtnName) {
                case "user":
                    List<User> studentList = userService.searchUserData(keyword);
                    showUserData(studentList);
                    break;
                case "book":
                    List<Book> bookList = bookService.searchBookData(keyword);
                    showBookData(bookList);

                    break;
                case "topic":
                    List<Topic> topicList = topicService.searchLTopicData(keyword);
                    showTopicData(topicList);

                    break;
                case "employee":
                    List<Employee> employeeList = employeeService.searchEmployeeData(keyword);
                    showEmployeeData(employeeList);
                    break;
                case "bookInfo":
                    List<BookInfo> bookInfoList = bookInfoService.searchBookInfoData(keyword);
                    showBookInfoData(bookInfoList);
                    break;
                case "language":
                    List<Language> languageList = languageService.searchLanguageData(keyword);
                    showLanguageData(languageList);
                    break;
                case "problemicUsers":

                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Please, select student!");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchLblMouseClicked

    private void keywordTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keywordTxtKeyReleased
        searchLblMouseClicked(null);
    }//GEN-LAST:event_keywordTxtKeyReleased

    private void giveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_giveBtnActionPerformed
        globBtnName = "give";
        try {
            showGiveBookData(giveBookService.getGiveBookList());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }//GEN-LAST:event_giveBtnActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        LoginFrame loginFrame = new LoginFrame();
        loginFrame.setLocationRelativeTo(null);
        loginFrame.setTitle("Log In");
        loginFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void statisticsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statisticsBtnActionPerformed
        try {

            showStatisticsData(userService.getUserStatistList());
            globBtnName = "statistics";
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_statisticsBtnActionPerformed

    private void batBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batBtnActionPerformed
        BookAuthorTopicFrame bookAuthorTopicFrame = new BookAuthorTopicFrame(bookService, authorService, bookInfoService, topicService);
        bookAuthorTopicFrame.setTitle("Book-author-topic");
        bookAuthorTopicFrame.setLocationRelativeTo(null);
        bookAuthorTopicFrame.setVisible(true);
    }//GEN-LAST:event_batBtnActionPerformed

    private void probUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_probUserBtnActionPerformed
        try {
            globBtnName = "problemicUsers";
            showProblemicUsers(userService.getProblemicUsers());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_probUserBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            globBtnName = "author";
            showAuthorData(authorService.getAuthorList());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batBtn;
    private javax.swing.JButton bookDataBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JButton employeeDataBtn;
    private javax.swing.JButton giveBtn;
    private javax.swing.JLabel infoLbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField keywordTxt;
    private javax.swing.JButton languageDataBtn;
    private javax.swing.JButton newBtn;
    private javax.swing.JButton probUserBtn;
    private javax.swing.JButton returnBtn;
    private javax.swing.JLabel searchLbl;
    private javax.swing.JButton statisticsBtn;
    private javax.swing.JButton topicDataBtn;
    private javax.swing.JButton userDataBtn;
    private javax.swing.JLabel welcomeLbl;
    // End of variables declaration//GEN-END:variables

    private void showUserData(List<User> userList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Date of birth");
            model.addColumn("Identity number");
            model.addColumn("Phone");
            model.addColumn("Mail");
            model.addColumn("User activity");

            //   List<User> userList = userService.getUserList();
            for (User user : userList) {
                Object[] data = new Object[]{
                    user.getId(), user.getName(), user.getSurname(), user.getDob(), user.getIdentityNumber(), user.getPhone(), user.getMail(), user.getUserActivity()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    private void showLanguageData(List<Language> languageList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");

            // List<Language> languageList = languageService.getLanguageList();
            for (Language language : languageList) {
                Object[] data = new Object[]{
                    language.getId(), language.getName()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showTopicData(List<Topic> topicList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");

            // List<Topic> topicList = topicService.getTopicList();
            for (Topic topic : topicList) {
                Object[] data = new Object[]{
                    topic.getId(), topic.getName()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showEmployeeData(List<Employee> employeeList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Position");

            //List<Employee> employeeList = employeeService.getEmployeeList();
            for (Employee employee : employeeList) {
                Object[] data = new Object[]{
                    employee.getId(), employee.getName(), employee.getSurname(), employee.getPosition().getName()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showBookData(List<Book> bookList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Language");
            model.addColumn("Page");
            model.addColumn("Date of publication");
            model.addColumn("Shelf");
            model.addColumn("Price(AZN)");
            model.addColumn("Number of book");

            //  List<Book> bookList = bookService.getBookList();
            for (Book book : bookList) {
                Object[] data = new Object[]{
                    book.getId(), book.getName(), book.getLanguage().getName(), book.getPage(),book.getDateOfPublication(), book.getShelf().getName(), book.getPrice(), book.getNumberOfBook()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showBookInfoData(List<BookInfo> bookInfoList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Book ");
            model.addColumn("Author ");
            model.addColumn("Topic");

            //List<BookInfo> bookInfoList = bookInfoService.getBookInfoList();
            for (BookInfo bookInfo : bookInfoList) {
                Object[] data = new Object[]{
                    bookInfo.getId(), bookInfo.getBook().getName(), bookInfo.getAuthor().getName() + " " + bookInfo.getAuthor().getSurname(), bookInfo.getTopic().getName()
                };
                model.addRow(data);
                model.fireTableDataChanged();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showGiveBookData(List<GiveBook> giveBookList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("User ");
            model.addColumn("Book ");
            model.addColumn("Reading room");
            model.addColumn("Employee");
            model.addColumn("Give date");
            model.addColumn("Return date");

            for (GiveBook giveBook : giveBookList) {

                Object[] data = new Object[]{
                    giveBook.getId(), giveBook.getUser().getName() + " " + giveBook.getUser().getSurname(), giveBook.getBook().getName(), giveBook.getReadingRoom().getName(), giveBook.getEmployee().getName() + " " + giveBook.getEmployee().getSurname(), giveBook.getDataDate(), giveBook.getRetrunDate()
                };
                model.addRow(data);
                model.fireTableDataChanged();

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showStatisticsData(List<User> userStatistList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("User activity");

            for (User user : userStatistList) {

                Object[] data = new Object[]{
                    user.getId(), user.getName(), user.getSurname(), user.getUserActivity()
                };
                model.addRow(data);
                model.fireTableDataChanged();

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showProblemicUsers(List<User> userList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");
            model.addColumn("Date of birth");
            model.addColumn("Identity number");
            model.addColumn("Phone");
            model.addColumn("Mail");
            model.addColumn("User activity");

            for (User user : userList) {

                Object[] data = new Object[]{
                    user.getId(), user.getName(), user.getSurname(), user.getDob(), user.getIdentityNumber(), user.getPhone(), user.getMail(), user.getUserActivity()
                };
                model.addRow(data);
                model.fireTableDataChanged();

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void showAuthorData(List<Author> authorList) {
        try {
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            jTable1.setModel(model);
            model.addColumn("№");
            model.addColumn("Name");
            model.addColumn("Surname");

            for (Author author : authorList) {

                Object[] data = new Object[]{
                    author.getId(), author.getName(), author.getSurname()
                };
                model.addRow(data);
                model.fireTableDataChanged();

            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}
